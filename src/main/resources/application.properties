# Назва додатку
spring.application.name=monscad
# ─ Назва застосунку для логування, моніторингу та ідентифікації. Рекомендовано задати,
#   оскільки її можна переглянути в логах або через actuator-ендпоінти.
#   (Не обов’язковий, але корисний параметр)

# Налаштування порту сервера та сесії (актуально, коли застосунок запускається як самодостатній JAR у Docker)
server.port=${SERVER_PORT}
# ─ Встановлює порт, на якому працює вбудований сервер (Tomcat, Jetty тощо).
#   За допомогою конструкції ${SERVER_PORT:8080} значення можна задати через змінну середовища.
#   Якщо Docker контейнер запускається без вказання змінної, використовується порт 8080.
#   При розгортанні WAR на зовнішньому сервері (наприклад, окремий Tomcat) цей параметр ігнорується.

server.servlet.session.timeout=-1
# ─ Встановлює час життя HTTP-сесії (-1 означає, що сесія не має обмеження за часом).
#   Опційний параметр, який можна прибрати, якщо вас влаштовують налаштування за замовчуванням.

server.servlet.context-path=/sebn-scada
# ─ Визначає базовий контекст застосунку (URL-префікс).
#   Наприклад, застосунок буде доступний за адресою http://<host>:<port>/sebn-scada.
#   Якщо Docker-контейнер використовується з вбудованим сервером і потрібен інший шлях,
#   цей параметр варто налаштувати. Якщо застосунок має працювати з кореневого шляху (/), цей рядок можна прибрати.

# Налаштування Hibernate (JPA)
spring.jpa.hibernate.ddl-auto=update
# ─ Автоматично оновлює схему бази даних згідно з визначеними entity.
#   Зручно під час розробки, але в продакшені часто використовують міграційні інструменти (Flyway, Liquibase).
#   Опційний параметр, який можна прибрати, якщо схему керують вручну.

spring.jpa.show-sql=false
# ─ Визначає, чи потрібно виводити SQL запити в лог.
#   Для налагодження можна змінити на true, але для продакшена бажано вимкнути.
#   Опційний.

# Параметри підключення до бази даних
spring.datasource.url=jdbc:mysql://${MYSQL_HOST}:${MYSQL_PORT}/${MYSQL_DATABASE}
# ─ JDBC URL для підключення до MySQL. Змінні середовища (MYSQL_HOST, MYSQL_PORT, MYSQL_DATABASE)
#   дозволяють задавати параметри контейнеру при запуску через docker run або docker-compose.
#   Обов’язковий, якщо застосунок використовує базу даних.

spring.datasource.username=${MYSQL_USER}
# ─ Ім'я користувача для підключення до бази даних. Значення можна передати через змінну середовища.
#   Обов’язковий.

spring.datasource.password=${MYSQL_PASSWORD}
# ─ Пароль для бази даних. Також можна задавати через змінну середовища.
#   Обов’язковий.

spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
# ─ Вказує клас драйвера для MySQL. Хоча Spring Boot зазвичай визначає його автоматично,
#   цей рядок може покращити стабільність підключення.
#   Опційний – можна прибрати, якщо автоконфігурація працює належним чином.

# Завантаження файлів
upload.path=${UPLOAD_PATH:src/main/resources/static/upload/}
# ─ Користувацький параметр для збереження завантажених файлів.
#   За допомогою Docker змінну UPLOAD_PATH можна задати зовнішнім томом (volume mount),
#   щоб файли зберігались поза контейнером.
#   Опційний – прибрати, якщо функціонал завантаження не використовується.

# Обмеження на завантаження файлів
spring.servlet.multipart.max-file-size=1000MB
# ─ Максимальний розмір одного завантажуваного файлу.
#   Опційний – налаштовується залежно від потреб.
 
spring.servlet.multipart.max-request-size=1000MB
# ─ Максимальний розмір всього HTTP-запиту при завантаженні файлів.
#   Опційний – налаштовується залежно від потреб.

# Адміністраторські параметри (користувацькі налаштування)
admin.adminEmail=${ADMIN_EMAIL:adminus@admin.com}
# ─ Email адміністратора для внутрішніх цілей (наприклад, сповіщення).
#   Обов’язковий для вашої бізнес-логіки, якщо використовується.
#   Значення можна задавати через змінну середовища при запуску контейнеру.

admin.password=${ADMIN_PASSWORD:SuperAdmin}
# ─ Пароль адміністратора. Використовується у власній логіці аутентифікації.
#   Опційний, залежно від реалізації. Рекомендовано передавати через змінні середовища.
 
admin.roles=ADMIN
# ─ Ролі адміністратора. Користувацький параметр.
#   Опційний, залежно від системи безпеки вашого застосунку.
 
admin.status=PREMIUM
# ─ Статус адміністратора. Користувацький параметр.
#   Опційний – прибрати, якщо не використовується.

# Тип веб-додатку
spring.main.web-application-type=servlet
# ─ Явно вказує, що застосунок є сервлет-застосунком.
#   При запуску як самостійного JAR у Docker цей параметр впливає на конфігурацію вбудованого сервера.
#   Якщо застосунок розгортається як WAR на зовнішньому сервері, цей параметр ігнорується.
#   Опційний – можна прибрати, якщо використовується стандартна конфігурація.

# Налаштування логування Hibernate
logging.level.org.hibernate.SQL=off
# ─ Вимикає вивід SQL запитів в лог для зменшення обсягу логів.
#   Опційний – для налагодження можна змінити на "debug" або "trace".

logging.level.org.hibernate.type.descriptor.sql.BasicTypeDescriptor=off
# ─ Вимикає детальне логування опису SQL типів.
#   Опційний.

logging.level.org.hibernate.type.descriptor.sql.BasicTypeRegistry=off
# ─ Вимикає логування реєстру SQL типів.
#   Опційний.

# JDBC Template Configuration
spring.jdbc.template.fetch-size=200
# ─ Встановлює розмір пакетного завантаження (fetch size) при використанні JdbcTemplate.
#   Опційний – налаштовується для оптимізації роботи з великими обсягами даних.
